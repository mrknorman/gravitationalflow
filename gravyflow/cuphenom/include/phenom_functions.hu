#ifndef PHENOM_FUNCTIONS_HU
#define PHENOM_FUNCTIONS_HU

#define BLOCK_SIZE 256

#include "units.h"
#include "phenom_d_structures.hu"

__device__ __forceinline__ float _chiPN(
    const float Seta, 
    const float eta, 
    const float chi1, 
    const float chi2
) {
   // Convention m1 >= m2 and chi1 is the spin on m1
   // The 0.5 factor missing in the definitions of chi_s and chi_a is
   // recovered in the return expresion:
   const float chi_s = (chi1 + chi2);
   const float chi_a = (chi1 - chi2);
  
   return 0.5f * (chi_s * (1.0f - eta * 76.0f / 113.0f) + Seta * chi_a);
}

// The phasing function for _TaylorF2 frequency-domain waveform.
// This function is tested in ../test/PNCoefficients.c for consistency
// with the energy and flux in this file.

// Taylor coefficients:

__device__ __forceinline__ float _TaylorF2Phasing_2PNCoeff(
    const float eta
    ) {
    return 5.0f*(74.3f/8.4f + 11.0f*eta)/9.0f;
}

__device__ __forceinline__ float _TaylorF2Phasing_3PNCoeff() {
    return -16.0f*(float)M_PI;
}

__device__ __forceinline__ float _TaylorF2Phasing_4PNCoeff(
    const float eta
    ) {
    return 5.0f*(3058.673f/7.056f + 5429.0f/7.0f*eta+617.0f*eta*eta)/72.0f;
}

__device__ __forceinline__ float _TaylorF2Phasing_5PNCoeff(
    const float eta
    ) {
    return 5.0f/9.0f*(772.9f/8.4f-13.0f*eta)*(float)M_PI;
}

__device__ __forceinline__ float _TaylorF2Phasing_5PNLogCoeff(
    const float eta
    ) {
    return 5.0f/3.0f*(772.9f/8.4f-13.0f*eta)*(float)M_PI;
}

__device__ __forceinline__ float _TaylorF2Phasing_6PNLogCoeff() {
    return -684.8f/2.1f;
}

__device__ __forceinline__ float _TaylorF2Phasing_6PNCoeff(
    const float eta
    ) {
   return 
         11583.231236531f/4.694215680f 
       - 640.0f/3.0f*PI_POWER_TWO 
       - 684.8f/2.1f*EULER_MASCHERONI 
       + eta*(-15737.765635f/3.048192f + 225.5f/1.2f*PI_POWER_TWO) 
       + eta*eta*76.055f/1.728f 
       - eta*eta*eta*127.825f/1.296f
       + _TaylorF2Phasing_6PNLogCoeff()*logf(4.0f);
}

__device__ __forceinline__ float _TaylorF2Phasing_7PNCoeff(
    const float eta
    ) {
    return 
        (float)M_PI*(
              770.96675f/2.54016f 
            + 378.515f/1.512f*eta 
            - 740.45f/7.56f*eta*eta
        );
}

__device__ __forceinline__ float _TaylorF2Phasing_7PNSOCoeff(
    const float mByM
    ) {
    const float eta = mByM*(1.0f-mByM);
    
    return 
       mByM*(
           - 17097.8035f/4.8384f
           + eta*28764.25f/6.72f
           + eta*eta*47.35f/1.44f 
           + mByM*(
               - 7189.233785f/1.524096f
               + eta*458.555f/3.024f
               - eta*eta*534.5f/7.2f
            )
        );
}

// Tidal corrections to F2 phasing
// See arXiv:1101.1673
__device__ __forceinline__ float _TaylorF2Phasing_10PNTidalCoeff(
    const float mByM // < ratio of object mass to total mass
    ) {
    return (-288.0f + 264.0f*mByM)*mByM*mByM*mByM*mByM;
}

__device__ __forceinline__ float _TaylorF2Phasing_12PNTidalCoeff(
    const float mByM // Ratio of object mass to total mass
    ) {
    
    return 
        (- 15895.0f/28.0f
         + 4595.0f/28.0f*mByM 
         + 5715.0f/14.0f*mByM*mByM 
         - 325.0f/7.0f*mByM*mByM*mByM
        )*mByM*mByM*mByM*mByM;
}

__device__ __forceinline__ float _TaylorF2Phasing_13PNTidalCoeff(
    const float mByM /**< ratio of object mass to total mass */
    ) { 
    // literature: Agathos et al (arxiv 1503.0545) eq (5)
    // the coefficient mByM4 conversion & transformation (6.5PN, 7PN, 7.5PN):
    // mByM=mA/M: mA= mass star A, M is total mass (mA+mB)
    // Lambda (unitless) = lambda(m) / mA^5 
    // to call the function: 
    // Lambda * XLALSimInspiralTaylorF2Phasing_13PNTidalCoeff 
    // lambda(m)*mByM^4/mA^5= lambda(m)*(mA/M)^4/(mA)^5= lambda/(M^4*mA) 
    // =lambda/(mByM*M^5) eq (5) 
    
    return mByM*mByM*mByM*mByM*24.0f*(12.0f - 11.0f*mByM)*(float)M_PI;
}
__device__ __forceinline__ float _TaylorF2Phasing_14PNTidalCoeff(
    const float mByM // ratio of object mass to total mass
    ) {
    //literature: Agathos et al (arxiv 1503.0545) eq (5)
    //caveat: these are incomplete terms
    //conversion see XLALSimInspiralTaylorF2Phasing_13PNTidalCoeff above
    //--> completed by the terms given in equation (4) of :
    //Tatsuya Narikawa, Nami Uchikata, Takahiro Tanaka,
    //"Gravitational-wave constraints on the GWTC-2 events by measuring
    //the tidal deformability and the spin-induced quadrupole moment",
    //Phys. Rev. D 104, 084056 (2021), arXiv:2106.09193
    const float mByM3 = mByM*mByM*mByM;
    const float mByM4 = mByM3 * mByM;
    return 
        - mByM4*5.0f*(
              193986935.0f/571536.0f 
            - 14415613.0f/381024.0f*mByM 
            - 57859.0f/378.0f*mByM*mByM 
            - 209495.0f/1512.0f*mByM3 
            + 965.0f/54.0f*mByM4 
            - 4.00f*mByM4*mByM
        );
}

__device__ __forceinline__ float _TaylorF2Phasing_15PNTidalCoeff(
    const float mByM // Ratio of object mass to total mass
    ) {
    //literature: Agathos et al (arxiv 1503.0545) eq (5)
    //conversion see XLALSimInspiralTaylorF2Phasing_13PNTidalCoeff above 
    //--> corrected by the terms given in equation (4) of :
    //Tatsuya Narikawa, Nami Uchikata, Takahiro Tanaka,
    //"Gravitational-wave constraints on the GWTC-2 events by measuring
    //the tidal deformability and the spin-induced quadrupole moment",
    //Phys. Rev. D 104, 084056 (2021), arXiv:2106.09193
    
    const float mByM2 = mByM*mByM;
    const float mByM3 = mByM2*mByM;
    const float mByM4 = mByM3*mByM;
    return 
        mByM4*1.0f/28.0f*(float)M_PI*(
              27719.0f 
            - 22415.0f*mByM 
            + 7598.0f*mByM2 
            - 10520.0f*mByM3
        );
}
__device__ pn_phasing_series_s _PNPhasing_F2(
    const float         m1, // Masns of body 1, in Msol
    const float         m2, // Mass of body 2, in Msol
    const float         chi1L, // Component of dimensionless spin 1 along Lhat
    const float         chi2L, // Component of dimensionless spin 2 along Lhat
    const float         lambda1,
    const float         lambda2,
    const tidal_order_e tidal_pn_order
    ) {
    
    const float mtot = m1 + m2;
    const float eta  = m1*m2/mtot/mtot;
    const float m1M  = m1/mtot;
    const float m2M  = m2/mtot;

    const float pfaN = 3.0f/(128.0f * eta);

    pn_phasing_series_s pfa;
    
    memset(pfa.v, 0, sizeof(double) * (PN_PHASING_SERIES_MAX_ORDER + 1));
    
    pfa.v[0]     = 1.0f;
    pfa.v[1]     = 0.0f;
    pfa.v[2]     = _TaylorF2Phasing_2PNCoeff(eta);
    pfa.v[3]     = _TaylorF2Phasing_3PNCoeff();
    pfa.v[4]     = _TaylorF2Phasing_4PNCoeff(eta);
    pfa.v[5]     = _TaylorF2Phasing_5PNCoeff(eta);
    pfa.vlogv[5] = _TaylorF2Phasing_5PNLogCoeff(eta);
    pfa.v[6]     = _TaylorF2Phasing_6PNCoeff(eta);
    pfa.vlogv[6] = _TaylorF2Phasing_6PNLogCoeff();
    pfa.v[7]     = _TaylorF2Phasing_7PNCoeff(eta)
                 + _TaylorF2Phasing_7PNSOCoeff(m1M)*chi1L
                 + _TaylorF2Phasing_7PNSOCoeff(m2M)*chi2L;
                 
    switch(tidal_pn_order)
    {
        case TIDAL_ORDER_75PN:
            pfa.v[15] = lambda1*_TaylorF2Phasing_15PNTidalCoeff(m1M) 
                      + lambda2*_TaylorF2Phasing_15PNTidalCoeff(m2M);
        case TIDAL_ORDER_ALL:
        case TIDAL_ORDER_7PN:
            pfa.v[14] = lambda1*_TaylorF2Phasing_14PNTidalCoeff(m1M) 
                      + lambda2*_TaylorF2Phasing_14PNTidalCoeff(m2M);
        case TIDAL_ORDER_65PN:
            pfa.v[13] = lambda1*_TaylorF2Phasing_13PNTidalCoeff(m1M) 
                      + lambda2*_TaylorF2Phasing_13PNTidalCoeff(m2M);
        case TIDAL_ORDER_6PN:
            pfa.v[12] = lambda1*_TaylorF2Phasing_12PNTidalCoeff(m1M) 
                      + lambda2*_TaylorF2Phasing_12PNTidalCoeff(m2M);
        case TIDAL_ORDER_5PN:
            pfa.v[10] = lambda1*_TaylorF2Phasing_10PNTidalCoeff(m1M) 
                      + lambda2*_TaylorF2Phasing_10PNTidalCoeff(m2M);
        case TIDAL_ORDER_0PN:
            break;
        default:
            printf(
                "%s:\nWarning! Invalid tidal PN order (%i)\n.",
                __func__, tidal_pn_order
            );    
        break;
    }
    
    // At the very end, multiply everything in the series by pfaN:
    for(int32_t index = 0; index < PN_PHASING_SERIES_MAX_ORDER + 1; index++)
    {
        pfa.v      [index] *= pfaN;
        pfa.vlogv  [index] *= pfaN;
    }
    
    return pfa;
}

// brief Returns structure containing _TaylorF2 phasing coefficients for given
// physical parameters.
__device__ pn_phasing_series_s initTaylorF2AlignedPhasingSeries(
    const system_properties_s system_properties,
    const tidal_order_e       tidal_pn_order
    ) {
    
    const companion_s companion_1 = system_properties.companion[0];
    const companion_s companion_2 = system_properties.companion[1];
    
    pn_phasing_series_s phasing_series =
        _PNPhasing_F2(
            companion_1.mass.msun, 
            companion_2.mass.msun, 
            companion_1.spin.z, 
            companion_2.spin.z, 
            companion_1.lambda,
            companion_2.lambda,
            tidal_pn_order
        );

    return phasing_series;
}


__global__ void _convertDurationsIntoSamples(
    const complex_waveform_axes_s  waveform_axes,
    const timeUnit_t              *shift_durations,
          float                   *num_samples_time_shift
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (waveform_index < waveform_axes.num_waveforms)
    {
        const timeUnit_t time_interval = 
            waveform_axes.time.interval_of_waveform[waveform_index];
            
        num_samples_time_shift[waveform_index] = 
            roundf(
                  shift_durations[waveform_index].seconds
                / time_interval.seconds
            )*time_interval.seconds; 
    }
}

__global__ void _performTimeShifts(
              complex_waveform_axes_s  waveform_axes, 
        const float                   *num_samples_time_shift
    ) {
    
    /**
     * Perform hetrodyne shift.
     * @param 
     * @see 
     * @return void
     */
    
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;
    
    if (waveform_index < waveform_axes.num_waveforms)
    {
        // If not outside array bounds, add value toa array element:
        if (sample_index < waveform_axes.strain.num_samples_in_waveform[waveform_index]) 
        {    
            cuFloatComplex shift_c  = (cuFloatComplex) {
                0.0f,
                2.0f * (float) M_PI * (float) sample_index 
                     * waveform_axes.frequency.interval_of_waveform[waveform_index].hertz
                     * num_samples_time_shift[waveform_index]
            };
            
            cuFloatComplex exp_shift_c = cudaCExpf(shift_c);

            waveform_axes.strain.values[thread_index].plus  = 
                cuCmulf(
                    waveform_axes.strain.values[thread_index].plus,
                    exp_shift_c
                );

            waveform_axes.strain.values[thread_index].cross = 
                cuCmulf(
                    waveform_axes.strain.values[thread_index].cross, 
                    exp_shift_c
                );
        }
    }
}

extern "C" int32_t performTimeShifts(
          complex_waveform_axes_s  waveform_axes,
    const timeUnit_t              *shift_durations
    ) {
    
    int32_t grid_size = 
        ((waveform_axes.num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    float *num_samples_time_shift = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(float),
        (void**)&num_samples_time_shift
    );
    
    _convertDurationsIntoSamples<<<grid_size,BLOCK_SIZE>>>(
        waveform_axes,
        shift_durations,
        num_samples_time_shift
    );
    
    grid_size = 
        ((waveform_axes.strain.total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _performTimeShifts<<<grid_size,BLOCK_SIZE>>>(
        waveform_axes,
        num_samples_time_shift
    );
        
    cudaFree(num_samples_time_shift);
    
    //XLALGPSAdd(&(*hptilde)->epoch, tshift);
    //XLALGPSAdd(&(*hctilde)->epoch, tshift);
    
    return 0;
}

__device__ __forceinline__ useful_powers_s _initUsefulPowers(
    const float one
    ) {
        
    const float sixth = sqrtf(one) / cbrtf(one);    
    const float m_sixth = 1.0f/sixth;
    
    useful_powers_s powers;
    
    powers.one            = one;
    powers.third          = _square(sixth);
    powers.two_thirds     = _square(powers.third);
    powers.four_thirds    = one*powers.third;
    powers.five_thirds    = powers.four_thirds*powers.third;
    powers.two            = _square(one);
    powers.seven_thirds   = powers.third*powers.two;
    powers.eight_thirds   = powers.two_thirds*powers.two;
    powers.inv            = 1.0f/one;
    powers.m_seven_sixths = powers.inv*m_sixth;
    powers.m_third        = _square(m_sixth);
    powers.m_two_thirds   = _square(powers.m_third);
    powers.m_five_thirds  = powers.inv*powers.m_two_thirds;
    
    return powers;
}

__global__ void _calculateInclinationFactors(
    const waveform_axes_s  waveform_axes,
          float           *cross_factor_array,
          float           *plus_factor_array
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    system_properties_s *system_properties_of = waveform_axes.system_properties_of;
    
    // If not outside array bounds, add value toa array element:
    if (waveform_index < waveform_axes.num_waveforms) 
	{    
        const angularUnit_t inclination = system_properties_of[waveform_index].inclination;
        
        const int32_t cross_factor = cosf(inclination.radians);
        cross_factor_array[waveform_index] = cross_factor;
        plus_factor_array[waveform_index]  = 0.5f * (1.0f + cross_factor*cross_factor);
    }
}

__global__ void _inclinationAdjust(
          waveform_axes_s  waveform_axes,
    const float           *cross_factor_array,
    const float           *plus_factor_array
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;
    
    // If not outside array bounds, add value toa array element:
    if (
           (thread_index < waveform_axes.strain.total_num_samples) 
        && (waveform_index < waveform_axes.num_waveforms)
    ) {
        if (sample_index <
            waveform_axes.strain.num_samples_in_waveform[waveform_index])
        {
            waveform_axes.strain.values[thread_index].plus  *= 
                plus_factor_array[waveform_index];
            waveform_axes.strain.values[thread_index].cross *= 
                cross_factor_array[waveform_index];
        }
    }    
}

extern "C" waveform_axes_s inclinationAdjust(
    waveform_axes_s waveform_axes
    ) {
    
    /* ADD BACK IN FOR GPS TIME OF MERGER
    float   max_amplitude = 0.0f;
    int32_t max_index     = waveform_axes_td.strain.num_samples - 1;
    
    for (int32_t index = max_index - 1; index > -1; index--)
    {    
        const float amplitude_squared = 
              waveform_axes_td.strain.values[index].plus *waveform_axes_td.strain.values[index].plus 
            + waveform_axes_td.strain.values[index].cross*waveform_axes_td.strain.values[index].cross;
                
        if (amplitude_squared > max_amplitude)
        {
            max_index     = index;
            max_amplitude = amplitude_squared;
        }
    }
    
    //XLALGPSSetREAL8(&(hp->epoch), -1.0*temporal_properties.time_interval.seconds * max_index);
    //XLALGPSSetREAL8(&(hc->epoch), -1.0*temporal_properties.time_interval.seconds * max_index);    
    */
    
    float *cross_factor_array = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(float),
        (void**)&cross_factor_array
    );
    float *plus_factor_array = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(float),
        (void**)&plus_factor_array
    );
    
    int32_t grid_size = 
        ((waveform_axes.num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _calculateInclinationFactors<<<grid_size, BLOCK_SIZE>>>(
         waveform_axes,
         cross_factor_array,
         plus_factor_array
    );
    
    grid_size = 
        ((waveform_axes.strain.total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE);
        
     _inclinationAdjust<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes,
        cross_factor_array,
        plus_factor_array
    );
    
    cudaFree(cross_factor_array);
    cudaFree(plus_factor_array);
    
    return waveform_axes;
}

__global__ void _calculatePolarisationFactors(
    const waveform_axes_s    waveform_axes,
          float             *cos_polarization_array,
          float             *sin_polarization_array
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
        
    // If not outside array bounds, add value toa array element:
    if (waveform_index < waveform_axes.num_waveforms) 
	{    
        const float polarization = 
            waveform_axes.system_properties_of[waveform_index]
                .ascending_node_longitude;
        
        cos_polarization_array[waveform_index] = cosf(2.0f*polarization);
        sin_polarization_array[waveform_index] = sinf(2.0f*polarization);
    }
}

__global__ void _polarisationRotation(
          waveform_axes_s waveform_axes,
    const float          *cos_polarization_array,
    const float          *sin_polarization_array
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;
        
        
    if (
           (thread_index < waveform_axes.strain.total_num_samples) 
        && (waveform_index < waveform_axes.num_waveforms)
    ) {
        
        if (sample_index <
            waveform_axes.strain.num_samples_in_waveform[waveform_index])
        {
        
        const float cos_polarization = 
            cos_polarization_array[waveform_index];
        
        const float sin_polarization = 
            sin_polarization_array[waveform_index];
    
        const float temp_plus = waveform_axes.strain.values[thread_index].plus;
        waveform_axes.strain.values[thread_index].plus = 
            (cos_polarization*waveform_axes.strain.values[thread_index].plus)
            + (sin_polarization*waveform_axes.strain.values[thread_index].cross);

        waveform_axes.strain.values[thread_index].cross = 
            (cos_polarization*waveform_axes.strain.values[thread_index].cross) 
            - (sin_polarization*temp_plus);
        }
    }  
}

extern "C" waveform_axes_s polarisationRotation(
    waveform_axes_s  waveform_axes
    ) {
    
    //R.C.: here's the reference explaining why we perform this rotation https://dcc.ligo.org/LIGO-G1900275
    
    float *cos_polarization_array = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(float),
        (void**)&cos_polarization_array
    );
    float *sin_polarization_array = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(float),
        (void**)&sin_polarization_array
    );
    
    int32_t grid_size = 
        ((waveform_axes.num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _calculatePolarisationFactors<<<grid_size, BLOCK_SIZE>>>(
          waveform_axes,
          cos_polarization_array,
          sin_polarization_array
    );

    grid_size = 
        ((waveform_axes.strain.total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE);

    _polarisationRotation<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes,
        cos_polarization_array,
        sin_polarization_array
    );
    
    cudaFree(cos_polarization_array);
    cudaFree(sin_polarization_array);
    
    return waveform_axes;
}

__global__ void _calcPolarizationCoefficients(
    const complex_waveform_axes_s  waveform_axes,
          cuFloatComplex            *cos_coefficients,
          cuFloatComplex            *sin_coefficients
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    
    if (waveform_index < waveform_axes.num_waveforms) 
	{
        const float ascending_node_longitude =
            waveform_axes
                .system_properties_of[waveform_index]
                    .ascending_node_longitude;
    
        cos_coefficients[waveform_index] = 
            (cuFloatComplex) {
                cosf(2.0f*ascending_node_longitude), 0.0f
            };
        sin_coefficients[waveform_index] = 
            (cuFloatComplex) {
                sinf(2.0f*ascending_node_longitude), 0.0f
            };
    }
}

__global__ void _applyPolarization(
    const complex_waveform_axes_s  waveform_axes,
    const cuFloatComplex          *cos_coefficients,
    const cuFloatComplex          *sin_coefficients
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;
    
    if (
           (thread_index < waveform_axes.strain.total_num_samples) 
        && (waveform_index < waveform_axes.num_waveforms)
    ) {
        
        if (sample_index < 
            waveform_axes.strain.num_samples_in_waveform[waveform_index])
        {
            const cuFloatComplex original_plus = 
                waveform_axes.strain.values[thread_index].plus;
            const cuFloatComplex original_cross = 
                waveform_axes.strain.values[thread_index].cross;

            waveform_axes.strain.values[thread_index].plus =
                cuCaddf(
                  cuCmulf(cos_coefficients[waveform_index], original_plus),
                  cuCmulf(sin_coefficients[waveform_index], original_cross)
                );

            waveform_axes.strain.values[thread_index].cross = 
                cuCsubf(
                  cuCmulf(cos_coefficients[waveform_index], original_cross),
                  cuCmulf(sin_coefficients[waveform_index], original_plus)
                );
        }
    }    
}

extern "C" int32_t applyPolarization(
    const complex_waveform_axes_s waveform_axes
    ) {
    
    cuFloatComplex *cos_coefficients = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(cuFloatComplex),
        (void**)&cos_coefficients
    );
    
    cuFloatComplex *sin_coefficients = NULL;
    cudaAllocateDeviceMemory(
        waveform_axes.num_waveforms,
        sizeof(cuFloatComplex),
        (void**)&sin_coefficients
    );
    
    int32_t grid_size = 
        ((waveform_axes.num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _calcPolarizationCoefficients<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes,
        cos_coefficients,
        sin_coefficients
    );
        
    grid_size = 
        ((waveform_axes.strain.total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE);
        
    _applyPolarization<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes,
        cos_coefficients,
        sin_coefficients
    );
    cudaFree(cos_coefficients);
    cudaFree(sin_coefficients);

    return 0;
}

__global__ void _calculateTaperIndicies(
    const complex_waveform_axes_s  waveform_axes,
    const frequencyUnit_t         *starting_frequencies,
    const frequencyUnit_t         *ending_frequencies,
          int32_t                 *start_indicies,
          int32_t                 *end_indicies
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    
    if (waveform_index < waveform_axes.num_waveforms) 
	{
        const temporal_properties_s temporal_properties = 
            waveform_axes.temporal_properties_of[waveform_index];
        const frequencyUnit_t frequency_interval = 
            temporal_properties.frequency_interval;    
    
        const frequencyUnit_t starting_frequency = 
            starting_frequencies[waveform_index];
        const frequencyUnit_t minimum_frequency = 
            ending_frequencies[waveform_index];
        
        // Calculate sample indicies of start and minimum frequencies:
        start_indicies[waveform_index] = 
            (int32_t)roundf(
                starting_frequency.hertz/frequency_interval.hertz
            );
        end_indicies[waveform_index] = 
            (int32_t)roundf(
                minimum_frequency.hertz/frequency_interval.hertz    
            );
    }
}

__global__ void _taperWaveform(
    const complex_waveform_axes_s  waveform_axes,
    const int32_t                 *start_indicies,
    const int32_t                 *end_indicies
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;
    
    if (waveform_index < waveform_axes.num_waveforms)
    {
        const int32_t start_index = 
            start_indicies[waveform_index];
        const int32_t end_index = 
            end_indicies[waveform_index];
        
        if (sample_index < start_index) 
        {
            // Ensure strain is zero below start_frequency:
            const cuFloatComplex complex_zero =
                (cuFloatComplex) {0.0f, 0.0f};

            waveform_axes.strain.values[thread_index].plus  = complex_zero;
            waveform_axes.strain.values[thread_index].cross = complex_zero;
        }
        else if (sample_index < end_index)
        {
            // Taper waveform between start_frequency and minimum_frequency:
            const float taper_scalar = 
                  0.5f 
                - 0.5f*cosf(
                    (float)M_PI
                    *(float)(sample_index - start_index) 
                    /(float)(end_index - start_index)
                );

            const cuFloatComplex complex_scalar = 
                (cuFloatComplex) {taper_scalar, 0.0f};

            waveform_axes.strain.values[thread_index].plus = 
                cuCmulf(waveform_axes.strain.values[thread_index].plus, complex_scalar);
            waveform_axes.strain.values[thread_index].cross = 
                cuCmulf(waveform_axes.strain.values[thread_index].cross, complex_scalar);
        }
    }
}

__global__ void _zeroNyquistFrequency(
    const complex_waveform_axes_s waveform_axes
    ) {
    
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (waveform_index < waveform_axes.num_waveforms)
    {
        const int32_t num_samples = 
            waveform_axes.strain.num_samples_in_waveform[waveform_index];
        
        // Make sure Nyquist frequency is zero:
        waveform_axes.strain.values[num_samples - 1].plus  = 
            (cuFloatComplex) {0.0f, 0.0f};
        waveform_axes.strain.values[num_samples - 1].cross =
            (cuFloatComplex) {0.0f, 0.0f};
    }
}

extern "C" int32_t taperWaveform(
    const complex_waveform_axes_s  waveform_axes,
    const frequencyUnit_t         *starting_frequencies,
    const frequencyUnit_t         *minimum_frequencies
    ) {
    
    //
    // Taper frequencies between starting_frequency and minimum_frequency 
    //
    
    // Calculate sample indicies of start and minimum frequencies:
    int32_t grid_size = 
        ((waveform_axes.num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);\
        
    const int32_t num_waveforms = waveform_axes.num_waveforms;
    
    int32_t *start_indicies = NULL;
    cudaAllocateDeviceMemory(
        num_waveforms,
        sizeof(int32_t),
        (void**)&start_indicies
    );
    
    int32_t *end_indicies = NULL;
    cudaAllocateDeviceMemory(
        num_waveforms,
        sizeof(int32_t),
        (void**)&end_indicies
    );
    
     _calculateTaperIndicies<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes,
        starting_frequencies,
        minimum_frequencies,
        start_indicies,
        end_indicies
    );
        
    // Perform tapering on device:
    grid_size = 
        ((waveform_axes.strain.total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE);
    _taperWaveform<<<grid_size, BLOCK_SIZE>>>
        (waveform_axes, start_indicies, end_indicies);
    
    //Needs to be updated to every waveform
    _zeroNyquistFrequency<<<1, 1>>>(
        waveform_axes
    );
    
    cudaFree(start_indicies);
    cudaFree(end_indicies);
    
    return 0;
}

__global__ void initFrequencyArray(
        complex_waveform_axes_s waveform_axes
    ) {
    
    //Init frequency array:
    //@param 
    //@see 
    //@return void
     
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    
    if (thread_index < waveform_axes.strain.total_num_samples) 
    {
        const int32_t max_num_samples_per_waveform = 
            waveform_axes.strain.max_num_samples_per_waveform;
        const int32_t waveform_index = (int32_t)
            floorf((float)thread_index / (float)max_num_samples_per_waveform);
        const int32_t sample_index = 
            (int32_t) thread_index % max_num_samples_per_waveform;
            
        if (waveform_index < waveform_axes.num_waveforms)
        {
            if (sample_index < 
                waveform_axes.frequency.num_samples_in_waveform[waveform_index])
            {
                const temporal_properties_s temporal_properties =
                    waveform_axes.temporal_properties_of[waveform_index];

                const frequencyUnit_t starting_frequency = 
                    temporal_properties.starting_frequency;
                const frequencyUnit_t frequency_interval = 
                    temporal_properties.frequency_interval;

                // Initilise frequency array using the upper and lower bounds:
                const int32_t start_index = 
                    (int32_t) (starting_frequency.hertz 
                        / frequency_interval.hertz);

                waveform_axes.frequency.values[thread_index].hertz = 
                    (float)(sample_index+start_index)*frequency_interval.hertz;
            }
        }
    }    
}


__device__ frequencyUnit_t _initFrequencyHertz(
	const float frequency_hertz
	) {
	
	frequencyUnit_t frequency = {
		 .hertz = frequency_hertz
	 };
	
	return frequency;
}

__global__ void _printSystemProperties(
    const system_properties_s *system_properties
    ) {

    printf("%f %f %f %f\n",
        system_properties[0].companion[0].mass.msun,
        system_properties[0].companion[0].mass.kilograms,
        system_properties[0].companion[0].mass.seconds,
        system_properties[0].companion[0].mass.meters
    );
    
    printf("%f %f %f %f\n",
        system_properties[1].companion[0].mass.msun,
        system_properties[1].companion[0].mass.kilograms,
        system_properties[1].companion[0].mass.seconds,
        system_properties[1].companion[0].mass.meters
    );
}

extern "C" void printSystemProperties(
    const system_properties_s *system_properties
    ) {
    
    _printSystemProperties<<<1,1>>>(system_properties);
}

__global__ void _calcNumStrainAxisSamples(
          temporal_properties_s *temporal_properties,
    const system_properties_s   *system_properties,
          float                 *num_strain_axis_samples,
    const int32_t                num_waveforms
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (waveform_index < num_waveforms) 
	{
        // Unpack temporal_properties:
        const frequencyUnit_t ending_frequency = 
            temporal_properties[waveform_index].ending_frequency;
        const frequencyUnit_t starting_frequency = 
            temporal_properties[waveform_index].starting_frequency;
        const frequencyUnit_t frequency_interval = 
            temporal_properties[waveform_index].frequency_interval; 
        const frequencyUnit_t reference_frequency = 
            temporal_properties[waveform_index].reference_frequency; 
        
        // If no reference frequency given, set it to the starting GW frequency:
        temporal_properties[waveform_index].reference_frequency.hertz = 
                  (reference_frequency.hertz > 0.0f)*reference_frequency.hertz 
                + (reference_frequency.hertz == 0.0f)*starting_frequency.hertz;     
        
        // Somewhat arbitrary end point for the waveform chosen so that the end 
        // of the waveform is well after the ringdown:
        const frequencyUnit_t cutoff_frequency = 
            _initFrequencyHertz(
                f_CUT/system_properties[waveform_index].total_mass.seconds
            );
            
        if (cutoff_frequency.hertz <= starting_frequency.hertz) 
        {
            printf(
               "%s:\n"
               "Warning! (cutoff_frequency: %fHz) <= (starting_frequency = %fHz)\n",
                __func__,
                cutoff_frequency.hertz,
                starting_frequency.hertz
            );
        }
                
        // If no ending frequency given, set it to cuttoff frequency: 
        temporal_properties[waveform_index].ending_frequency.hertz =
            (ending_frequency.hertz > 0.0f)*ending_frequency.hertz 
            + (ending_frequency.hertz == 0.0f)*cutoff_frequency.hertz;
            
        frequencyUnit_t new_ending_frequency = 
            temporal_properties[waveform_index].ending_frequency;
        
        // If no ending frequency given, set it to cuttoff frequency: 
        temporal_properties[waveform_index].ending_frequency.hertz = 
                (new_ending_frequency.hertz > cutoff_frequency.hertz) ? 
                    cutoff_frequency.hertz : new_ending_frequency.hertz;
            
        new_ending_frequency = 
            temporal_properties[waveform_index].ending_frequency;
                
        if (new_ending_frequency.hertz <= starting_frequency.hertz)
        {
            printf(
                "%s:\n"
                "Warning! new_ending_frequency (%f) Hz <= starting_frequency"
                " (%f) Hz, for waveform (%i).\n",
                __func__,
                new_ending_frequency.hertz,
                starting_frequency.hertz,
                waveform_index
            );
        }
        
        if (new_ending_frequency.hertz > ending_frequency.hertz)
        {
        
            num_strain_axis_samples[waveform_index] = 
                _calcNextPow2(
                    new_ending_frequency.hertz / frequency_interval.hertz
                ) + 1;
        }
        else
        {
            // The user has requested a higher old_ending_frequency than 
            // Mf=frequency_cutoff.resize the frequency series to fill with zeros 
            // beyond the cutoff frequency:
            num_strain_axis_samples[waveform_index] = 
                _calcNextPow2(
                    ending_frequency.hertz / frequency_interval.hertz
                ) + 1; 
            // We actually want to have the length be a power of 2 + 1.
        }
        
        // Check frequency bounds:
        if (starting_frequency.hertz <= 0.0f)
        {
            printf(
                "%s:\n Error! Starting frequency (%f) Hz must be positive. \n",
                __func__, 
                starting_frequency.hertz 
            );
        }
        if (ending_frequency.hertz < 0.0f)
        {
            printf(
                "%s:\n Error! Ending frequency (%f) Hz must not be negative. \n",
                __func__, 
                ending_frequency.hertz 
            );
        }
    }
}

extern "C" int32_t calcNumStrainAxisSamples(
          temporal_properties_s *temporal_properties,
    const system_properties_s   *system_properties,
    const int32_t                num_waveforms
    ) {
    
    float *num_strain_axis_samples = NULL;
    CUDA_CALL(
        cudaMalloc(
            (void**)&num_strain_axis_samples, 
            sizeof(float)*(size_t)num_waveforms
        )
    );
    
    const int32_t grid_size = 
        ((num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _calcNumStrainAxisSamples<<<grid_size, BLOCK_SIZE>>>(
        temporal_properties,
        system_properties,
        num_strain_axis_samples,
        num_waveforms
    );
    
    const int32_t max_num_strain_axis_samples = 
        (int32_t) cudaFindMaxHost(
            num_strain_axis_samples, 
            num_waveforms
        );
        
    return max_num_strain_axis_samples;
}

__global__ void _calcNumFrequencyAxisSamples(
    const temporal_properties_s *temporal_properties,
          float                 *num_strain_axis_samples,
          float                 *num_frequency_axis_samples,
    const int32_t                num_waveforms
    ) {
    
    // Assign unique thread index for GPU calculation:
    const int32_t waveform_index = blockIdx.x * blockDim.x + threadIdx.x;
    
    // If not outside array bounds, add value toa array element:
    if (waveform_index < num_waveforms) 
	{   
        const frequencyUnit_t starting_frequency = 
            temporal_properties[waveform_index].starting_frequency;
        const frequencyUnit_t ending_frequency   = 
            temporal_properties[waveform_index].ending_frequency;
        const frequencyUnit_t frequency_interval = 
            temporal_properties[waveform_index].frequency_interval;
            
        // Initilise frequency array using the upper and lower bounds:
        const float start_index = 
            roundf(starting_frequency.hertz 
                / frequency_interval.hertz);
        const float end_index = 
            roundf(ending_frequency.hertz 
                / frequency_interval.hertz);
                
        num_frequency_axis_samples[waveform_index] = 
            end_index - start_index;
            
        // Error check indicies:
        if (end_index >= num_strain_axis_samples[waveform_index])
        {
            printf(
                "%s:\n"
                "Error! Calculated end_index (%f) is greater than "
                "num_strain_axis_samples (%f)! For waveform (%i). Exiting!",
                __func__, 
                end_index, 
                num_strain_axis_samples[waveform_index], 
                waveform_index
            );
        }
        else if (start_index >= end_index)
        {
            printf(
                "%s:\n"
                "Error! Calculated start_index (%f) is greater than end_index "
                "(%f)! For waveform (%i). Exiting!",
                __func__, 
                start_index, 
                end_index, 
                waveform_index
            );
        }
    }
}

extern "C" int32_t calcNumFrequencyAxisSamples(
    const temporal_properties_s *temporal_properties,
          float                 *num_strain_axis_samples,
    const int32_t                num_waveforms
    ) {
        
    float *num_frequency_axis_samples = NULL;
    CUDA_CALL(
        cudaMalloc(
            (void**)&num_frequency_axis_samples, 
            sizeof(float)*(size_t)num_waveforms
        )
    );
    
    const int32_t grid_size = 
        ((num_waveforms + BLOCK_SIZE - 1) / BLOCK_SIZE);
    
    _calcNumFrequencyAxisSamples<<<grid_size, BLOCK_SIZE>>>(
        temporal_properties,
        num_strain_axis_samples,
        num_frequency_axis_samples,
        num_waveforms
    );
    
    const int32_t max_num_frequency_axis_samples = 
        (int32_t) cudaFindMaxHost(
            num_frequency_axis_samples, 
            num_waveforms
        );
        
    return max_num_frequency_axis_samples;
}

extern "C" void printComplexStrainElement(
    const complex_strain_element_c strain_element
    ) {
    
    printf(
        "Plus: %e + %ei. Cross: %e + %ei. \n", 
        strain_element.plus.x, 
        strain_element.plus.y,
        strain_element.cross.x, 
        strain_element.cross.y
    );
}
    
extern "C" void printComplexStrain(
    const complex_waveform_axes_s waveform_axes
    ) {
    
    // Unpack variables:
    const complex_strain_array_s strain_array    = waveform_axes.strain;
    const frequency_array_s      frequency_array = waveform_axes.frequency;
    const int32_t                num_waveforms   = waveform_axes.num_waveforms;
    
    float* num_samples_in_waveform = NULL;
    cudaToHost(
        (void*)strain_array.num_samples_in_waveform, 
        sizeof(float),
        num_waveforms,
        (void**)&num_samples_in_waveform
    ); 
    
    complex_strain_element_c* strain_values = NULL;
    cudaToHost(
        (void*)strain_array.values, 
        sizeof(complex_strain_element_c),
        strain_array.total_num_samples,
        (void**)&strain_values
    ); 
    
    frequencyUnit_t* frequency_values = NULL;
    cudaToHost(
        (void*)frequency_array.values, 
        sizeof(frequencyUnit_t),
        frequency_array.total_num_samples,
        (void**)&frequency_values
    ); 
    
    const int32_t max_num_samples_per_waveform = strain_array.max_num_samples_per_waveform;
    
    for (int32_t waveform_index = 0; waveform_index < num_waveforms; waveform_index++)
    {
    
        const int32_t num_samples = (int32_t) num_samples_in_waveform[waveform_index];
        printf("Waveform %i. Num samples %i. \n", waveform_index, num_samples);
        
        for (int32_t sample_index = 0; sample_index < num_samples; sample_index++)
        {
            const complex_strain_element_c strain_element = 
                strain_values[waveform_index*max_num_samples_per_waveform + sample_index];
                
            const frequencyUnit_t frequency = 
                frequency_values[waveform_index*max_num_samples_per_waveform + sample_index];
            
            printf("%i.%i: %f:", waveform_index, sample_index, frequency.hertz);
            printComplexStrainElement(strain_element);
        }
    }
    
    free(strain_values);
    free(frequency_values);
    free(num_samples_in_waveform);
}

extern "C" void printStrainElement(
    const strain_element_t strain_element
    ) {
    
    printf(
        "Plus: %e. Cross: %e\n", 
        strain_element.plus,
        strain_element.cross
    );
}
    
extern "C" void printStrain(
    const strain_array_s strain_array,
    const int32_t        num_waveforms
    ) {
    
    float* num_samples_in_waveform = NULL;
    cudaToHost(
        (void*)strain_array.num_samples_in_waveform, 
        sizeof(float),
        num_waveforms,
        (void**)&num_samples_in_waveform
    ); 
    
    strain_element_t* strain_values = NULL;
    cudaToHost(
        (void*)strain_array.values, 
        sizeof(strain_element_t),
        strain_array.total_num_samples,
        (void**)&strain_values
    ); 
    
    const int32_t max_num_samples_per_waveform = strain_array.max_num_samples_per_waveform;
    
    for (int32_t waveform_index = 0; waveform_index < num_waveforms; waveform_index++)
    {
    
        const int32_t num_samples = (int32_t) num_samples_in_waveform[waveform_index];
        printf("Waveform %i. Num samples %i. \n", waveform_index, num_samples);
        
        for (int32_t sample_index = 0; sample_index < num_samples; sample_index++)
        {
            const strain_element_t strain_element = 
                strain_values[waveform_index*max_num_samples_per_waveform + sample_index];
            
            printf("%i.%i:", waveform_index, sample_index);
            printStrainElement(strain_element);
        }
    }
    
    free(strain_values);
    free(num_samples_in_waveform);
}


extern "C" void checkStrainNans(
    const complex_strain_array_s strain_array,
    const int32_t                num_waveforms
    ) {
    
    float* num_samples_in_waveform = NULL;
    cudaToHost(
        (void*)strain_array.num_samples_in_waveform, 
        sizeof(float),
        num_waveforms,
        (void**)&num_samples_in_waveform
    ); 
    
    complex_strain_element_c* strain_values = NULL;
    cudaToHost(
        (void*)strain_array.values, 
        sizeof(complex_strain_element_c),
        strain_array.total_num_samples,
        (void**)&strain_values
    ); 
    
    const int32_t max_num_samples_per_waveform = strain_array.max_num_samples_per_waveform;
    
    printf("Max num samples per waveform %i \n", max_num_samples_per_waveform);
    
    for (int32_t waveform_index = 0; waveform_index < num_waveforms; waveform_index++)
    {
    
        const int32_t num_samples = (int32_t) num_samples_in_waveform[waveform_index];
        printf("Waveform %i. Num samples %i. \n", waveform_index, num_samples);
        
        for (int32_t sample_index = 0; sample_index < max_num_samples_per_waveform; sample_index++) //num_samples
        {
            complex_strain_element_c strain_element = strain_values[waveform_index*max_num_samples_per_waveform + sample_index];
            
            if (((isnan(strain_element.plus.x) || isnan(strain_element.plus.y))
                || isnan(strain_element.cross.x)) || isnan(strain_element.cross.y))
            {
                printf("%i.%i:", waveform_index, sample_index);
                printComplexStrainElement(strain_element);
            }
        }
    }
    
    free(strain_values);
    free(num_samples_in_waveform);
}  

__global__ void _rearrangeMemoryKernel(
          cuFloatComplex *input, 
          cuFloatComplex *output, 
    const int32_t         num_waveforms, 
    const int32_t         num_elements_in_subarray
    ) {
    
    const int32_t thread_index = threadIdx.x + blockDim.x * blockIdx.x;

    // This kernel rearranges memory assuming there is one thread for each element.
    if(thread_index < num_waveforms*num_elements_in_subarray*2) 
    {
        const int32_t waveform_index = thread_index / (num_elements_in_subarray*2);
        const int32_t sample_index   = thread_index % (num_elements_in_subarray*2);

        int32_t new_index = 0;
        if(sample_index % 2 == 0) 
        { // Plus components.
            new_index = waveform_index*2*num_elements_in_subarray + sample_index/2;
        } 
        else 
        { // Cross components.
            new_index = (waveform_index*2+1)*num_elements_in_subarray + sample_index/2;
        }

        output[new_index] = input[thread_index];      
    }
}

extern "C" int32_t rearrangeMemoryKernel(
          cuFloatComplex *input, 
          cuFloatComplex *output, 
    const int32_t         num_waveforms, 
    const int32_t         num_elements_in_subarray
    ) {

    const int32_t grid_size = (num_waveforms*num_elements_in_subarray*2 + BLOCK_SIZE - 1) / BLOCK_SIZE;
    
    _rearrangeMemoryKernel<<<grid_size, BLOCK_SIZE>>>(
        input, 
        output, 
        num_waveforms, 
        num_elements_in_subarray
    );
    
    return 0;
}

__global__ void _inverseRearrangeMemoryKernel(
          float   *input, 
          float   *output, 
    const int32_t  num_waveforms, 
    const int32_t  num_elements_in_subarray
    ) {
    
    const int32_t thread_index = threadIdx.x + blockDim.x * blockIdx.x;

    if(thread_index < num_waveforms*num_elements_in_subarray*2) {
        const int32_t waveform_index = thread_index / (num_elements_in_subarray*2);
        const int32_t sample_index   = thread_index % (num_elements_in_subarray*2);

        int32_t new_index = 0;
        if(sample_index < num_elements_in_subarray) 
        { // Real components.
            new_index = waveform_index*num_elements_in_subarray*2 + sample_index*2;
        } 
        else 
        { // Transformed imaginary components.
            new_index = waveform_index*num_elements_in_subarray*2 + (sample_index - num_elements_in_subarray)*2 + 1;
        }

        output[new_index] = input[thread_index];
    }
}

extern "C" int32_t inverseRearrangeMemoryKernel(
          float   *input, 
          float   *output, 
    const int32_t  num_waveforms, 
    const int32_t  num_elements_in_subarray
    ) {

    const int32_t grid_size = (num_waveforms*num_elements_in_subarray*2 + BLOCK_SIZE - 1) / BLOCK_SIZE;
    
    _inverseRearrangeMemoryKernel<<<grid_size, BLOCK_SIZE>>>(
        input, 
        output, 
        num_waveforms, 
        num_elements_in_subarray
    );
    
    return 0;
}

__global__ void _cropAxes(
          waveform_axes_s   waveform_axes, 
          float            *arg_max_array,
          strain_element_t *output,
    const int32_t           num_samples_needed
    ) {
        
    // Assign unique thread index for GPU calculation:
    const int32_t thread_index = 
        blockIdx.x * blockDim.x + threadIdx.x;
    const int32_t max_num_samples_per_waveform = 
        waveform_axes.strain.max_num_samples_per_waveform;
    const int32_t waveform_index = (int32_t)
        floorf((float)thread_index / (float)max_num_samples_per_waveform);
    const int32_t sample_index = 
        (int32_t) thread_index % max_num_samples_per_waveform;        
    
    const int32_t total_num_samples =
        waveform_axes.strain.total_num_samples;
        
    if ((thread_index < total_num_samples) && 
        (waveform_index < waveform_axes.num_waveforms))
    {
        int32_t num_unneeded_samples = 
            arg_max_array[waveform_index]
            - num_samples_needed;
            
        num_unneeded_samples *= (num_unneeded_samples > 0);
        
        const int32_t new_sample_index = sample_index - num_unneeded_samples;
        
        if  ((sample_index > num_unneeded_samples) && (new_sample_index < num_samples_needed))
        {
            const int32_t new_index = waveform_index*num_samples_needed + new_sample_index;
            output[new_index] = waveform_axes.strain.values[thread_index];
        }
    }
}

extern "C" waveform_axes_s cropAxes(
          waveform_axes_s       waveform_axes, 
    const temporal_properties_s temporal_properties,
    const int32_t               num_samples_needed
    ) {
    
    const int32_t total_num_samples =
        waveform_axes.strain.total_num_samples;
    const int32_t num_waveforms =
         waveform_axes.num_waveforms;
    
    float* arg_max_array = NULL;
    cudaAllocateDeviceMemory(
        num_waveforms,
        sizeof(float),
        (void**)&arg_max_array
    );
        
    cudaFindArgAbsMaxMulti(
      (float*) waveform_axes.strain.values, 
      arg_max_array,
      num_waveforms,
      waveform_axes.strain.max_num_samples_per_waveform*NUM_POLARIZATION_STATES,
      waveform_axes.strain.total_num_samples*NUM_POLARIZATION_STATES
	);
        
    hostCudaMultiplyByValue(
        arg_max_array, 
        0.5, 
        num_waveforms
    );
        
    timeUnit_t time_after_merger = initTimeSeconds(0.15f);
    
    float num_samples_after_merger = 
        ceilf(time_after_merger.seconds/temporal_properties.time_interval.seconds);
    
    hostCudaAddValue(
          arg_max_array, 
          (double) num_samples_after_merger, 
          num_waveforms
    );
    
    strain_element_t* cropped_array = NULL;
    cudaAllocateDeviceMemory(
        num_waveforms*num_samples_needed,
        sizeof(strain_element_t),
        (void**)&cropped_array
    );

    const int32_t grid_size = 
        (total_num_samples + BLOCK_SIZE - 1) / BLOCK_SIZE;
    
    _cropAxes<<<grid_size, BLOCK_SIZE>>>(
        waveform_axes, 
        arg_max_array,
        cropped_array,
        num_samples_needed
    );
    
    cudaFree(arg_max_array);
        
    cudaFree(waveform_axes.strain.values);
    
    waveform_axes.strain.values            = cropped_array;
    waveform_axes.strain.total_num_samples = num_waveforms*num_samples_needed;
    
    return waveform_axes;
}

#endif